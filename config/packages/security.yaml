security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        users:
            memory:
                users:
                    '%admin_login%': { password: '%admin_password%', roles: ['ROLE_ADMIN'] }

    firewalls:
        login:
            pattern: '^%jwt_login_path%'
            stateless: true
            json_login:
                check_path: jwt_login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: '^/api'
            stateless: true
            jwt: ~

    access_control:
        - { path: '^%jwt_login_path%', roles: PUBLIC_ACCESS }
        - { path: '^/api/v0/admin', roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
